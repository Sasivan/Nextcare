
'use client';

import { useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Sparkles, RefreshCw } from 'lucide-react';
import { generateWellnessSummary } from '@/ai/flows/wellness-summary';
import type { VitalSigns } from '@/lib/types';

interface WellnessSummaryProps {
  vitalSigns: VitalSigns | null;
}

export function WellnessSummary({ vitalSigns }: WellnessSummaryProps) {
  const [summary, setSummary] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchSummary = useCallback(async () => {
    if (!vitalSigns) {
      setSummary('Vital signs data is not available yet.');
      return;
    }

    setIsLoading(true);
    setError(null);
    try {
      const result = await generateWellnessSummary({ vitalSigns });
      setSummary(result.summary);
    } catch (e) {
      console.error("Failed to generate wellness summary:", e);
      setError("Could not load summary. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, [vitalSigns]);

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-primary" />
          AI Wellness Summary
        </CardTitle>
        <CardDescription>
          A brief overview of the latest vital signs data, generated by AI. Click the button to generate a summary.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {isLoading ? (
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
            </div>
          ) : error ? (
            <p className="text-sm text-destructive">{error}</p>
          ) : (
             <p className="text-sm text-foreground">{summary || 'Click "Generate Summary" to get an AI-powered analysis of the current vital signs.'}</p>
          )}

          <Button onClick={fetchSummary} disabled={isLoading || !vitalSigns}>
            <RefreshCw className={`mr-2 h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
            {isLoading ? 'Generating...' : 'Generate Summary'}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
